apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger-service-account
  namespace: istio-system
  labels:
    app: jaeger
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jaeger-istio-system
  labels:
    app: jaeger
rules:
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "create", "patch", "update", "delete"]
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["apps"]
    resources: ["daemonsets"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jaeger-istio-system
subjects:
  - kind: ServiceAccount
    name: jaeger-service-account
    namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jaeger-istio-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-sampling-configuration
  namespace: istio-system
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
data:
  sampling: '{"default_strategy":{"param":1,"type":"probabilistic"}}'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-ui-configuration
  namespace: istio-system
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
data:
  ui: '{"dependencies":{"menuEnabled":false}}'
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: jaeger-cert
  namespace: istio-system
spec:
  secretName: jaeger-secret
  usages:
    - digital signature
    - key encipherment
    - server auth
    - client auth
  dnsNames:
    - "tmax-cloud"
    - "jaeger-query.istio-system.svc"
  issuerRef:
    kind: ClusterIssuer
    group: cert-manager.io
    name: tmaxcloud-issuer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: istio-system
  name: jaeger-collector
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  selector:
    matchLabels:
      app: jaeger
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jaeger
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: collector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14268"
    spec:
      serviceAccountName: jaeger-service-account
      containers:
        - image: docker.io/jaegertracing/jaeger-collector:{JAEGER_VERSION}
          name: jaeger-collector
          args:
            - --grpc-storage-plugin.binary=/plugin/jaeger-objectstorage
            - --grpc-storage-plugin.configuration-file=/plugin/loki.yaml
            - --sampling.strategies-file=/etc/jaeger/sampling/sampling.json
            - --collector.zipkin.host-port=9411
            - --log-level=info
          ports:
            - containerPort: 14250
              protocol: TCP
            - containerPort: 14268
              protocol: TCP
            - containerPort: 9411
              protocol: TCP
            - containerPort: 14269
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 14269
          volumeMounts:
            - name: jaeger-sampling-configuration-volume
              mountPath: /etc/jaeger/sampling
              readOnly: true
            - name: plugin-volume
              mountPath: /plugin
            - name: jaeger-certs
              mountPath: /ca/cert
              readOnly: true
          env:
            - name: SPAN_STORAGE_TYPE
              value: grpc-plugin
      initContainer:
        - image: docker.io/tmaxcloudck/jaeger-loki-plugin:{PLUGIN_VERSION}
          name: install-plugin
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: jaeger-sampling-configuration-volume
              mountPath: /etc/jaeger/sampling
              readOnly: true
            - name: plugin-volume
              mountPath: /plugin
      volumes:
        - name: jaeger-certs
          secret:
            defaultMode: 420
            secretName: jaeger-secret
        - configMap:
            defaultMode: 420
            name: jaeger-sampling-configuration
            items:
              - key: sampling
                path: sampling.json
          name: jaeger-sampling-configuration-volume
        - emptyDir: {}
          name: plugin-volume
---
apiVersion: v1
kind: Service
metadata:
  namespace: istio-system
  name: jaeger-collector
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  ports:
    - name: jaeger-collector-grpc
      port: 14250
      protocol: TCP
      targetPort: 14250
    - name: jaeger-collector-http
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: zipkin
  namespace: istio-system
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: zipkin
spec:
  ports:
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    app: jaeger
    app.kubernetes.io/component: query
    app.kubernetes.io/name: jaeger
  name: jaeger-query
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prometheus.io/port: "16686"
        prometheus.io/scrape: "true"
      creationTimestamp: null
      labels:
        app: jaeger
        app.kubernetes.io/component: query
        app.kubernetes.io/name: jaeger
    spec:
      serviceAccountName: jaeger-service-account
      containers:
        - name: gatekeeper
          image: docker.io/tmaxcloudck/gatekeeper:{GATEKEEPER_VERSION}
          imagePullPolicy: Always
          args:
            - --client-id={CLIENT_ID}
            - --client-secret={CLIENT_SECRET}
            - --listen=:3000
            - --upstream-url=http://127.0.0.1:16686
            - --discovery-url=https://{GATEKEEPER_ADDR}/auth/realms/tmax
            - --secure-cookie=true
            - --skip-openid-provider-tls-verify=true
            - --enable-self-signed-tls=false
            - --tls-cert=/etc/secrets/tls.crt
            - --tls-private-key=/etc/secrets/tls.key
            - --tls-ca-certificate=/etc/secrets/ca.crt
            - --skip-upstream-tls-verify=true
            - --upstream-keepalives=false
            - --enable-default-deny=true
            - --enable-refresh-tokens=true
            - --enable-metrics=true
            - --encryption-key=AgXa7xRcoClDEU0ZDSH4X0XhL5Qy2Z2j
            - --forbidden-page=/html/access-forbidden.html
            - --resources=uri=/*|roles=jaeger:jaeger-manager
            - --enable-encrypted-token
            - --log-level=error
          ports:
            - containerPort: 3000
              name: gatekeeper
          volumeMounts:
            - name: gatekeeper-files
              mountPath: /html
            - name: jaeger-certs
              mountPath: /etc/secrets
              readOnly: true
        - name: jaeger-query
          image: docker.io/jaegertracing/jaeger-query:{JAEGER_VERSION}
          imagePullPolicy: IfNotPresent
          args:
            - --grpc-storage-plugin.binary=/plugin/jaeger-objectstorage
            - --grpc-storage-plugin.configuration-file=/plugin/loki.yaml
            - --query.ui-config=/etc/config/ui.json
            - --log-level=info
          env:
            - name: SPAN_STORAGE_TYPE
              value: "grpc-plugin"
            - name: BASE_QUERY_PATH
              value: /api/jaeger
          ports:
            - containerPort: 16685
              protocol: TCP
            - containerPort: 16686
              protocol: TCP
            - containerPort: 16687
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 16687
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 4
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/config
              name: jaeger-ui-configuration-volume
              readOnly: true
            - name: plugin-volume
              mountPath: "/plugin"
            - name: jaeger-certs
              mountPath: /ca/cert
              readOnly: true
      initContainers:
        - image: docker.io/tmaxcloudck/jaeger-loki-plugin:{PLUGIN_VERSION}
          name: install-plugin
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: jaeger-ui-configuration-volume
              mountPath: /etc/config
              readOnly: true
            - name: plugin-volume
              mountPath: /plugin
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
        - name: jaeger-certs
          secret:
            secretName: jaeger-secret
        - name: gatekeeper-files
          configMap:
            name: gatekeeper-files
        - configMap:
            defaultMode: 420
            items:
              - key: ui
                path: ui.json
            name: jaeger-ui-configuration
          name: jaeger-ui-configuration-volume
        - emptyDir: {}
          name: plugin-volume
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    traefik.ingress.kubernetes.io/service.serverstransport: tmaxcloud@file
  labels:
    app: jaeger
    app.kubernetes.io/component: query
    app.kubernetes.io/name: jaeger
  name: jaeger-query
  namespace: istio-system
spec:
  ports:
    - name: jaeger-query
      port: 443
      protocol: TCP
      targetPort: 3000
    - name: grpc-query
      port: 16685
      protocol: TCP
      targetPort: 16685
  selector:
    app.kubernetes.io/component: query
    app.kubernetes.io/name: jaeger
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger-ingress
  namespace: istio-system
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
    ingress.tmaxcloud.org/name: jaeger
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  ingressClassName: tmax-cloud
  tls:
    - hosts:
        - jaeger.{CUSTOM_DOMAIN_NAME}
  rules:
    - host: jaeger.{CUSTOM_DOMAIN_NAME}
      http:
        paths:
          - backend:
              service:
                name: jaeger-query
                port:
                  number: 443
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - jaeger.{CUSTOM_DOMAIN_NAME}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: istio-system
  name: jaeger-agent
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: agent
spec:
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5778"
    spec:
      serviceAccountName: jaeger-service-account
      containers:
        - image: docker.io/jaegertracing/jaeger-agent:{JAEGER_VERSION}
          name: jaeger-agent
          args:
            - --reporter.grpc.host-port=dns:///jaeger-collector.istio-system.svc:14250
            - --log-level=info
          volumeMounts:
            - name: jaeger-certs
              mountPath: /ca/cert
              readOnly: true
          ports:
            - containerPort: 5775
              protocol: UDP
            - containerPort: 6831
              protocol: UDP
            - containerPort: 6832
              protocol: UDP
            - containerPort: 5778
              protocol: TCP
            - containerPort: 14271
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      volumes:
        - name: jaeger-certs
          secret:
            defaultMode: 420
            secretName: jaeger-secret
